package rca.ac.rw.template.auth;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import rca.ac.rw.template.audits.TimestampAudit;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Table(name = "otps", indexes = {
        @Index(name = "idx_otp_user_email_type", columnList = "userEmail, otpType") // For efficient lookup
})
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Otp extends TimestampAudit { // Extends TimestampAudit for createdAt and updatedAt

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) // Or GenerationType.UUID if you prefer UUIDs for OTP IDs
    private UUID id;

    @NotBlank(message = "OTP value is required")
    @Column(nullable = false)
    private String otpValue;

    @NotBlank(message = "User email is required for OTP")
    @Column(nullable = false)
    private String userEmail;

    @NotNull(message = "OTP type is required")
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private OtpType otpType;

    @NotNull(message = "Expiration time is required")
    @Column(nullable = false, name = "expires_at")
    private LocalDateTime expiresAt;

    @Column(nullable = false)
    private boolean used = false; // To mark OTP as used

    // Constructors, Getters, Setters will be generated by Lombok @Data, @NoArgsConstructor, @AllArgsConstructor
    // You can add a constructor for easier creation:
    public Otp(String otpValue, String userEmail, OtpType otpType, LocalDateTime expiresAt) {
        this.otpValue = otpValue;
        this.userEmail = userEmail;
        this.otpType = otpType;
        this.expiresAt = expiresAt;
        this.used = false;
    }
}